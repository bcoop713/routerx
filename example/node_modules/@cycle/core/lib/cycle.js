"use strict";

var Rx = require("rx");

function makeRequestProxies(drivers) {
  var requestProxies = {};
  for (var _name in drivers) {
    if (drivers.hasOwnProperty(_name)) {
      requestProxies[_name] = new Rx.ReplaySubject(1);
    }
  }
  return requestProxies;
}

function callDrivers(drivers, requestProxies) {
  var responses = {};
  for (var _name2 in drivers) {
    if (drivers.hasOwnProperty(_name2)) {
      responses[_name2] = drivers[_name2](requestProxies[_name2], _name2);
    }
  }
  return responses;
}

function makeDispose(requestProxies, rawResponses) {
  return function dispose() {
    for (var x in requestProxies) {
      if (requestProxies.hasOwnProperty(x)) {
        requestProxies[x].dispose();
      }
    }
    for (var _name3 in rawResponses) {
      if (rawResponses.hasOwnProperty(_name3) && typeof rawResponses[_name3].dispose === "function") {
        rawResponses[_name3].dispose();
      }
    }
  };
}

function makeAppInput(requestProxies, rawResponses) {
  Object.defineProperty(rawResponses, "dispose", {
    enumerable: false,
    value: makeDispose(requestProxies, rawResponses)
  });
  return rawResponses;
}

function logToConsoleError(err) {
  var target = err.stack || err;
  if (console && console.error) {
    console.error(target);
  }
}

function replicateMany(original, imitators) {
  for (var _name4 in original) {
    if (original.hasOwnProperty(_name4)) {
      if (imitators.hasOwnProperty(_name4) && !imitators[_name4].isDisposed) {
        original[_name4].doOnError(logToConsoleError).subscribe(imitators[_name4].asObserver());
      }
    }
  }
}

function isObjectEmpty(obj) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

function run(main, drivers) {
  if (typeof main !== "function") {
    throw new Error("First argument given to Cycle.run() must be the 'main' " + "function.");
  }
  if (typeof drivers !== "object" || drivers === null) {
    throw new Error("Second argument given to Cycle.run() must be an object " + "with driver functions as properties.");
  }
  if (isObjectEmpty(drivers)) {
    throw new Error("Second argument given to Cycle.run() must be an object " + "with at least one driver function declared as a property.");
  }

  var requestProxies = makeRequestProxies(drivers);
  var rawResponses = callDrivers(drivers, requestProxies);
  var responses = makeAppInput(requestProxies, rawResponses);
  var requests = main(responses);
  setTimeout(function () {
    return replicateMany(requests, requestProxies);
  }, 1);
  return [requests, responses];
}

var Cycle = {
  /**
   * Takes an `main` function and circularly connects it to the given collection
   * of driver functions.
   *
   * The `main` function expects a collection of "driver response" Observables
   * as input, and should return a collection of "driver request" Observables.
   * A "collection of Observables" is a JavaScript object where
   * keys match the driver names registered by the `drivers` object, and values
   * are Observables or a collection of Observables.
   *
   * @param {Function} main a function that takes `responses` as input
   * and outputs a collection of `requests` Observables.
   * @param {Object} drivers an object where keys are driver names and values
   * are driver functions.
   * @return {Array} an array where the first object is the collection of driver
   * requests, and the second object is the collection of driver responses, that
   * can be used for debugging or testing.
   * @function run
   */
  run: run,

  /**
   * A shortcut to the root object of
   * [RxJS](https://github.com/Reactive-Extensions/RxJS).
   * @name Rx
   */
  Rx: Rx
};

module.exports = Cycle;